/* libgherkin3-0.1.vapi generated by valac 0.30.0, do not modify. */

namespace Gherkin {
	namespace Ast {
		[CCode (cheader_filename = "libgherkin3.h")]
		public abstract class AbstractNode : GLib.Object, Json.Serializable {
			protected AbstractNode (Gherkin.Ast.Location location);
			public virtual bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public virtual Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public string to_string ();
			public Gherkin.Ast.Location location { get; set; }
			public string node_type { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Background : Gherkin.Ast.AbstractNode {
			public Background (Gherkin.Ast.Location location, string keyword, string name, string? description, Gee.ArrayList<Gherkin.Ast.Step> steps);
			public override bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public override Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public string description { get; set; }
			public string keyword { get; set; }
			public string name { get; set; }
			public Gee.ArrayList<Gherkin.Ast.Step> steps { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Comment : Gherkin.Ast.AbstractNode {
			public Comment (Gherkin.Ast.Location location, string text);
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class DataTable : Gherkin.Ast.AbstractNode {
			public DataTable (Gee.ArrayList<Gherkin.Ast.TableRow> rows);
			public override bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public override Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public Gee.ArrayList<Gherkin.Ast.TableRow> rows { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class DocString : Gherkin.Ast.AbstractNode {
			public DocString (Gherkin.Ast.Location location, string? contentType, string content);
			public string content { get; set; }
			public string contentType { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Examples : Gherkin.Ast.AbstractNode {
			public Examples (Gherkin.Ast.Location location, Gee.ArrayList<Gherkin.Ast.Tag> tags, string keyword, string name, string? description, Gherkin.Ast.TableRow tableHeader, Gee.ArrayList<Gherkin.Ast.TableRow>? tableBody);
			public override bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public override Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public string description { get; set; }
			public string keyword { get; set; }
			public string name { get; set; }
			public Gee.ArrayList<Gherkin.Ast.TableRow> tableBody { get; set; }
			public Gherkin.Ast.TableRow tableHeader { get; set; }
			public Gee.ArrayList<Gherkin.Ast.Tag> tags { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Feature : Gherkin.Ast.AbstractNode {
			public Feature (Gee.ArrayList<Gherkin.Ast.Tag> tags, Gherkin.Ast.Location location, string language, string keyword, string name, string? description, Gherkin.Ast.Background? background, Gee.ArrayList<Gherkin.Ast.ScenarioDefinition> scenarioDefinitions, Gee.ArrayList<Gherkin.Ast.Comment> comments);
			public override Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public Gherkin.Ast.Background background { get; set; }
			public Gee.ArrayList<Gherkin.Ast.Comment> comments { get; set; }
			public string description { get; set; }
			public string keyword { get; set; }
			public string language { get; set; }
			public string name { get; set; }
			public Gee.ArrayList<Gherkin.Ast.ScenarioDefinition> scenarioDefinitions { get; set; }
			public Gee.ArrayList<Gherkin.Ast.Tag> tags { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Location : GLib.Object {
			public Location (int line, int column);
			public int column { get; set; }
			public int line { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Scenario : Gherkin.Ast.ScenarioDefinition {
			public Scenario (Gee.ArrayList<Gherkin.Ast.Tag> tags, Gherkin.Ast.Location location, string keyword, string name, string? description, Gee.ArrayList<Gherkin.Ast.Step> steps);
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public abstract class ScenarioDefinition : Gherkin.Ast.AbstractNode {
			public ScenarioDefinition (Gee.ArrayList<Gherkin.Ast.Tag> tags, Gherkin.Ast.Location location, string keyword, string name, string? description, Gee.ArrayList<Gherkin.Ast.Step> steps);
			public override bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public override Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public string description { get; set; }
			public string keyword { get; set; }
			public string name { get; set; }
			public Gee.ArrayList<Gherkin.Ast.Step> steps { get; set; }
			public Gee.ArrayList<Gherkin.Ast.Tag> tags { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class ScenarioOutline : Gherkin.Ast.ScenarioDefinition {
			public ScenarioOutline (Gee.ArrayList<Gherkin.Ast.Tag> tags, Gherkin.Ast.Location location, string keyword, string name, string? description, Gee.ArrayList<Gherkin.Ast.Step> steps, Gee.ArrayList<Gherkin.Ast.Examples> examples);
			public override bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public override Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public Gee.ArrayList<Gherkin.Ast.Examples> examples { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Step : Gherkin.Ast.AbstractNode {
			public Step (Gherkin.Ast.Location location, string keyword, string text, Gherkin.Ast.AbstractNode? argument);
			public Gherkin.Ast.AbstractNode argument { get; set; }
			public string keyword { get; set; }
			public string text { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class TableCell : Gherkin.Ast.AbstractNode {
			public TableCell (Gherkin.Ast.Location location, string value);
			public string value { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class TableRow : Gherkin.Ast.AbstractNode {
			public TableRow (Gherkin.Ast.Location location, Gee.ArrayList<Gherkin.Ast.TableCell> cells);
			public override bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public override Json.Node serialize_property (string property_name, GLib.Value value, GLib.ParamSpec pspec);
			public Gee.ArrayList<Gherkin.Ast.TableCell> cells { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Tag : Gherkin.Ast.AbstractNode {
			public Tag (Gherkin.Ast.Location location, string name);
			public string name { get; set; }
		}
	}
	namespace Pickles {
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Compiler {
			public Compiler ();
			public Gee.ArrayList<Gherkin.Pickles.Pickle> compile (Gherkin.Ast.Feature feature, string path);
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class Pickle : GLib.Object, Json.Serializable {
			public Pickle (string name, Gee.ArrayList<Gherkin.Pickles.PickleStep> steps, Gee.ArrayList<Gherkin.Pickles.PickleTag> tags, Gee.ArrayList<Gherkin.Pickles.PickleLocation> locations);
			public virtual bool deserialize_property (string property_name, out GLib.Value value, GLib.ParamSpec pspec, Json.Node property_node);
			public Gee.ArrayList<Gherkin.Pickles.PickleLocation> locations { get; set; }
			public string name { get; set; }
			public Gee.ArrayList<Gherkin.Pickles.PickleStep> steps { get; set; }
			public Gee.ArrayList<Gherkin.Pickles.PickleTag> tags { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class PickleCell : GLib.Object {
			public PickleCell (Gherkin.Pickles.PickleLocation location, string value);
			public Gherkin.Pickles.PickleLocation location { get; set; }
			public string value { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class PickleLocation : GLib.Object {
			public PickleLocation (string path, int line, int column);
			public int column { get; set; }
			public int line { get; set; }
			public string path { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class PickleRow : GLib.Object {
			public PickleRow (Gee.ArrayList<Gherkin.Pickles.PickleCell> cells);
			public Gee.ArrayList<Gherkin.Pickles.PickleCell> cells { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class PickleStep : GLib.Object, Json.Serializable {
			public PickleStep (string text, Gee.ArrayList<Gherkin.Pickles.Argument> arguments, Gee.ArrayList<Gherkin.Pickles.PickleLocation> locations);
			public Gee.ArrayList<Gherkin.Pickles.Argument> arguments { get; set; }
			public Gee.ArrayList<Gherkin.Pickles.PickleLocation> locations { get; set; }
			public string text { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class PickleString : GLib.Object, Gherkin.Pickles.Argument {
			public PickleString (Gherkin.Pickles.PickleLocation location, string content);
			public string content { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class PickleTable : GLib.Object, Gherkin.Pickles.Argument {
			public PickleTable (Gee.ArrayList<Gherkin.Pickles.PickleRow> rows);
			public Gee.ArrayList<Gherkin.Pickles.PickleRow> rows { get; set; }
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public class PickleTag : GLib.Object {
			public PickleTag (Gherkin.Pickles.PickleLocation location, string name);
		}
		[CCode (cheader_filename = "libgherkin3.h")]
		public interface Argument : GLib.Object {
			public abstract Gherkin.Pickles.PickleLocation location { get; set; }
		}
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class AstBuilder : GLib.Object, Gherkin.Builder<Gherkin.Ast.Feature> {
		public AstBuilder ();
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class AstNode : GLib.Object {
		public Gherkin.Parser.RuleType ruleType;
		public AstNode (Gherkin.Parser.RuleType ruleType);
		public void add (Gherkin.Parser.RuleType ruleType, GLib.Object obj);
		public Gee.ArrayList<T> get_items<T> (Gherkin.Parser.RuleType ruleType);
		public T get_single<T> (Gherkin.Parser.RuleType ruleType, T defaultResult);
		public Gherkin.Token get_token (Gherkin.Parser.TokenType tokenType);
		public Gee.ArrayList<Gherkin.Token> get_tokens (Gherkin.Parser.TokenType tokenType);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class GherkinDialect : GLib.Object {
		public GherkinDialect (string language, Gee.Map<string,Gee.ArrayList<string>> keywords);
		public Gee.ArrayList<string> get_background_keywords ();
		public Gee.ArrayList<string> get_examples_keywords ();
		public Gee.ArrayList<string> get_feature_keywords ();
		public Gee.ArrayList<string> get_scenario_keywords ();
		public Gee.ArrayList<string> get_scenario_outline_keywords ();
		public Gee.ArrayList<string> get_step_keywords ();
		public string[] and { get; set; }
		public string[] background { get; set; }
		public string[] but { get; set; }
		public string[] examples { get; set; }
		public string[] feature { get; set; }
		public string[] given { get; set; }
		public string language { get; set; }
		public string name { get; set; }
		public string native { get; set; }
		public string[] scenario { get; set; }
		public string[] scenarioOutline { get; set; }
		public string[] then { get; set; }
		public string[] when { get; set; }
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class GherkinDialectProvider : GLib.Object, Gherkin.IGherkinDialectProvider {
		public GherkinDialectProvider (string default_dialect_name = "en");
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class GherkinLanguageConstants {
		public const string COMMENT_PREFIX;
		public const string DOCSTRING_ALTERNATIVE_SEPARATOR;
		public const string DOCSTRING_SEPARATOR;
		public const string TABLE_CELL_SEPARATOR;
		public const string TAG_PREFIX;
		public const string TITLE_KEYWORD_SEPARATOR;
		public GherkinLanguageConstants ();
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class GherkinLine : GLib.Object, Gherkin.IGherkinLine {
		public GherkinLine (string lineText);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class GherkinLineSpan : GLib.Object {
		public int column;
		public string text;
		public GherkinLineSpan (int column, string text);
		public bool equals (Gherkin.GherkinLineSpan o);
		public int hash_code ();
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class Parser<T> {
		public enum RuleType {
			None,
			_EOF,
			_Empty,
			_Comment,
			_TagLine,
			_FeatureLine,
			_BackgroundLine,
			_ScenarioLine,
			_ScenarioOutlineLine,
			_ExamplesLine,
			_StepLine,
			_DocStringSeparator,
			_TableRow,
			_Language,
			_Other,
			Feature,
			Feature_Header,
			Background,
			Scenario_Definition,
			Scenario,
			ScenarioOutline,
			Examples_Definition,
			Examples,
			Scenario_Step,
			ScenarioOutline_Step,
			Step,
			Step_Arg,
			DataTable,
			DocString,
			Tags,
			Feature_Description,
			Background_Description,
			Scenario_Description,
			ScenarioOutline_Description,
			Examples_Description,
			Description_Helper,
			Description
		}
		public enum TokenType {
			None,
			EOF,
			Empty,
			Comment,
			TagLine,
			FeatureLine,
			BackgroundLine,
			ScenarioLine,
			ScenarioOutlineLine,
			ExamplesLine,
			StepLine,
			DocStringSeparator,
			TableRow,
			Language,
			Other;
			public string to_string ();
		}
		public Parser (Gherkin.Builder<T> builder);
		public T parse (Gherkin.ITokenScanner tokenScanner, Gherkin.ITokenMatcher tokenMatcher) throws Gherkin.ParserException;
		public T parse_reader (GLib.InputStream source, Gherkin.ITokenMatcher? tokenMatcher = null) throws Gherkin.ParserException;
		public T parse_string (string source, Gherkin.ITokenMatcher? tokenMatcher = null) throws Gherkin.ParserException;
		public bool stop_at_first_error { get; set; }
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class StringUtils {
		public StringUtils ();
		public static string join<T> (Gherkin.ToString<T> toString, string separator, Gee.Iterable<T> items);
		public static string joinv (string separator, Gee.ArrayList<string> items);
		public static string ltrim (string s);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class SymbolCounter {
		public SymbolCounter ();
		public static int count_symbols (string str);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class Token : GLib.Object {
		public Token (Gherkin.IGherkinLine? line, Gherkin.Ast.Location? location);
		public void detach ();
		public string get_token_value ();
		public bool is_EOF ();
		public string to_string ();
		public Gherkin.IGherkinLine line { get; set; }
		public Gherkin.Ast.Location location { get; set; }
		public Gherkin.GherkinDialect matched_gherkin_dialect { get; set; }
		public int matched_indent { get; set; }
		public Gee.ArrayList<Gherkin.GherkinLineSpan> matched_items { get; set; }
		public string matched_keyword { get; set; }
		public string matched_text { get; set; }
		public Gherkin.Parser.TokenType matched_type { get; set; }
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class TokenFormatter {
		public TokenFormatter ();
		public string format_token (Gherkin.Token token);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class TokenFormatterBuilder : GLib.Object, Gherkin.Builder<string> {
		public TokenFormatterBuilder ();
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class TokenMatcher : GLib.Object, Gherkin.ITokenMatcher {
		public TokenMatcher (string default_dialect_name = "en");
		protected void setTokenMatched (Gherkin.Token token, Gherkin.Parser.TokenType matched_type, string? text, string? keyword, int? indent, Gee.ArrayList<Gherkin.GherkinLineSpan>? items);
		public Gherkin.GherkinDialect current_dialect { get; private set; }
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public class TokenScanner : GLib.Object, Gherkin.ITokenScanner {
		public TokenScanner (GLib.InputStream source);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public interface Builder<T> : GLib.Object {
		public abstract void build (Gherkin.Token token);
		public abstract void end_rule (Gherkin.Parser.RuleType ruleType);
		public abstract T get_result ();
		public abstract void reset ();
		public abstract void start_rule (Gherkin.Parser.RuleType ruleType);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public interface IGherkinDialectProvider : GLib.Object {
		public abstract Gherkin.GherkinDialect get_default_dialect ();
		public abstract Gherkin.GherkinDialect get_dialect (string language, Gherkin.Ast.Location? location);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public interface IGherkinLine : GLib.Object {
		public abstract void detach ();
		public abstract string get_line_text (int indentToRemove);
		public abstract string get_rest_trimmed (int length);
		public abstract Gee.ArrayList<Gherkin.GherkinLineSpan> get_table_cells ();
		public abstract Gee.ArrayList<Gherkin.GherkinLineSpan> get_tags ();
		public abstract int indent ();
		public abstract bool is_empty ();
		public abstract bool starts_with (string prefix);
		public abstract bool starts_with_title_keyword (string keyword);
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public interface ITokenMatcher : GLib.Object {
		public abstract bool match_BackgroundLine (Gherkin.Token token);
		public abstract bool match_Comment (Gherkin.Token token);
		public abstract bool match_DocStringSeparator (Gherkin.Token token);
		public abstract bool match_EOF (Gherkin.Token token);
		public abstract bool match_Empty (Gherkin.Token token);
		public abstract bool match_ExamplesLine (Gherkin.Token token);
		public abstract bool match_FeatureLine (Gherkin.Token token);
		public abstract bool match_Language (Gherkin.Token token);
		public abstract bool match_Other (Gherkin.Token token);
		public abstract bool match_ScenarioLine (Gherkin.Token token);
		public abstract bool match_ScenarioOutlineLine (Gherkin.Token token);
		public abstract bool match_StepLine (Gherkin.Token token);
		public abstract bool match_TableRow (Gherkin.Token token);
		public abstract bool match_TagLine (Gherkin.Token token);
		public abstract void reset ();
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public interface ITokenScanner : GLib.Object {
		public abstract Gherkin.Token read ();
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public errordomain ParserException {
		AST_BUILDER,
		NO_SUCH_LANGUAGE,
		UNEXPECTED_TOKEN,
		UNEXPECTED_EOF,
		COMPOSITE_PARSER
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public errordomain RuntimeException {
		INTERNAL_ERROR,
		UNEXPECTED_ARGUMENT,
		ILLEGAL_STATE
	}
	[CCode (cheader_filename = "libgherkin3.h")]
	public delegate V Func<V> ();
	[CCode (cheader_filename = "libgherkin3.h")]
	public delegate string ToString<T> (T t);
	[CCode (cheader_filename = "libgherkin3.h")]
	public static Gherkin.ParserException UnexpectedEOFException (Gherkin.Token receivedToken, Gee.ArrayList<string> expectedTokenTypes, string stateComment);
	[CCode (cheader_filename = "libgherkin3.h")]
	public static Gherkin.ParserException UnexpectedTokenException (Gherkin.Token receivedToken, Gee.ArrayList<string> expectedTokenTypes, string stateComment);
}
